version: "3"
name: vokraf-backend

services:
  # api gateway
  api-gateway-consumer:
    build:
      context: ../apps/api-gateway-consumer
      dockerfile: ./Dockerfile
      target: development
    command: pnpm run start:dev
    env_file:
      - ../apps/api-gateway-consumer/.env.local
    environment:
      - KAFKA_HOST=host.docker.internal:29092
    ports:
      - 3000:3000
    depends_on:
      - kafka

  api-gateway-learning:
    build:
      context: ../apps/api-gateway-learning
      dockerfile: ./Dockerfile
      target: development
    command: pnpm run start:dev
    env_file:
      - ../apps/api-gateway-learning/.env.local
    environment:
      - KAFKA_HOST=host.docker.internal:29092
    ports:
      - 3001:3001
    depends_on:
      - kafka

  # blog
  blog-service:
    build:
      context: ../apps/blog-service
      dockerfile: ./Dockerfile
      target: development
    command: pnpm run start:dev
    env_file:
      - ../apps/blog-service/.env.local
    environment:
      - KAFKA_HOST=host.docker.internal:29092
    depends_on:
      - kafka
      - blog-db

  blog-db:
    image: postgres:latest
    restart: always
    shm_size: 128mb
    volumes:
      - ./docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=blog
    ports:
      - 5435:5432

  # certificate
  certificate-service:
    build:
      context: ../apps/certificate-service
      dockerfile: ./Dockerfile
      target: development
    command: pnpm run start:dev
    env_file:
      - ../apps/certificate-service/.env.local
    depends_on:
      - kafka
      - certificate-db

  certificate-db:
    image: postgres:latest
    restart: always
    shm_size: 128mb
    volumes:
      - ./docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=certificate
    ports:
      - 5436:5432

  # course
  course-service:
    build:
      context: ../apps/course-service
      dockerfile: ./Dockerfile
      target: development
    command: pnpm run start:dev
    env_file:
      - ../apps/course-service/.env.local
    depends_on:
      - kafka
      - course-db

  course-db:
    image: postgres:latest
    restart: always
    shm_size: 128mb
    volumes:
      - ./docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=course
      - POSTGRES_PORT=5434
    ports:
      - 5434:5432

  learning-service:
    build:
      context: ../apps/learning-service
      dockerfile: ./Dockerfile
      target: development
    command: pnpm run start:dev
    env_file:
      - ../apps/learning-service/.env.local
    depends_on:
      - kafka
      - learning-db

  learning-db:
    image: postgres:11.5-alpine
    restart: always
    shm_size: 128mb
    volumes:
      - ./docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=learning
    ports:
      - 5437:5432

  # messaging-service:
  #   build:
  #     context: ../apps/messaging-service
  #     dockerfile: ./Dockerfile
  #     target: development
  #   command: pnpm run start:dev
  #   env_file:
  #     - .env.local
  #   depends_on:
  #     - kafka

  # prakerja-service:
  #   build:
  #     context: ../apps/prakerja-service
  #     dockerfile: ./Dockerfile
  #     target: development
  #   command: pnpm run start:dev
  #   env_file:
  #     - ../apps/prakerja-service/.env.local
  #   depends_on:
  #     - db-prakerja
  #     - kafka

  # transaction-service:
  #   build:
  #     context: ../apps/transaction-service
  #     dockerfile: ./Dockerfile
  #     target: development
  #   command: pnpm run start:dev
  #   env_file:
  #     - .env.local
  #   depends_on:
  #     - kafka
  #     - db-transaction

  # user-service:
  #   build:
  #     context: ../apps/user-service
  #     dockerfile: ./Dockerfile
  #     target: development
  #   command: pnpm run start:dev
  #   env_file:
  #     - .env.local
  #   depends_on:
  #     - kafka
  #     - db-user

  # learning
  # learning-service:
  #   build:
  #     context: ../apps/learning-service
  #     dockerfile: ./Dockerfile
  #     target: development
  #   command: pnpm run start:dev
  #   env_file:
  #     - ../apps/learning-service/.env.local
  #   depends_on:
  #     - kafka
  #     - learning-db

  messaging-db:
    image: postgres:latest
    restart: always
    shm_size: 128mb
    volumes:
      - ./docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=messaging
      - POSTGRES_PORT=5434
    ports:
      - 5438:5432

  prakerja-db:
    image: postgres:latest
    restart: always
    shm_size: 128mb
    volumes:
      - ./docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=messaging
      - POSTGRES_PORT=5434
    ports:
      - 5440:5432

  transaction-db:
    image: postgres:latest
    restart: always
    shm_size: 128mb
    volumes:
      - ./docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=transaction
      - POSTGRES_PORT=5434
    ports:
      - 5439:5432

  user-db:
    image: postgres:11.5-alpine
    restart: always
    shm_size: 128mb
    volumes:
      - ./docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=user
    ports:
      - 5433:5432

  zoo:
    image: confluentinc/cp-zookeeper:latest
    hostname: zoo
    container_name: zoo
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo:2888:3888
      ALLOW_ANONYMOUS_LOGIN: yes

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKAJS_NO_PARTITIONER_WARNING: 1
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo
